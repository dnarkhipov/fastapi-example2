"""Init

Revision ID: b8984957477d
Revises: 
Create Date: 2022-10-01 23:26:45.179856

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b8984957477d'
down_revision = None
branch_labels = None
depends_on = None


update_generic_record_sql = """
create or replace function update_generic_record() returns trigger
    language plpgsql
as
$$
begin
    new.modified = now();
    return new;
end;
$$;
"""

companies_tgr_sql = """
create trigger companies_tgr
 before update
  on companies
   for each row execute procedure update_generic_record();
"""

accounts_tgr_sql = """
create trigger accounts_tgr
 before update
  on accounts
   for each row execute procedure update_generic_record();
"""


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('accounts',
    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('type', sa.Enum('account_type_1', 'account_type_2', 'account_type_3', 'account_type_4', name='account_type'), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('account', sa.String(), nullable=False),
    sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('additional_info', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('archived', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account')
    )
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    op.execute(update_generic_record_sql)
    op.execute(companies_tgr_sql)
    op.execute(accounts_tgr_sql)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('accounts')
    op.drop_table('companies')
    # ### end Alembic commands ###

    op.execute("drop function if exists update_generic_record();")
    op.execute("drop type if exists account_type;")
